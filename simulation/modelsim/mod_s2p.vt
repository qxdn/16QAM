// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/16/2020 23:26:31"
                                                                                
// Verilog Test Bench template for design : mod_s2p
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module mod_s2p_vlg_tst();
// constants                                           
// general purpose registers

// test vector input registers
reg clk_p;
reg clk_s;
reg reset_n;
reg signal;
// wires                                               
wire [3:0]  code;

// assign statements (if any)                          
mod_s2p i1 (
// port map - connection between master ports and signals/registers   
	.clk_p(clk_p),
	.clk_s(clk_s),
	.code(code),
	.reset_n(reset_n),
	.signal(signal)
);

initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
    #0 reset_n=1'b0;
	 #0 clk_s = 1'b0;
	 #0 clk_p = 1'b0;
	 #1 reset_n=1'b1;
// --> end                                             
                      
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
    #2 clk_s = ~clk_s;                                                   
                                             
// --> end                                             
end     

always 
begin
	#8 clk_p = ~clk_p;
end    

always @(posedge clk_s) begin
	signal = {$random} % 2;
end
                                           
endmodule

